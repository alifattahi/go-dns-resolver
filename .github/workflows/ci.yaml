name: CI Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
permissions:
  contents: write
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: "1.23"

      - name: Install golangci-lint
        run: |
          curl -sSfL https://github.com/golangci/golangci-lint/releases/download/v1.63.4/golangci-lint-1.63.4-linux-amd64.deb -o golangci-lint.deb
          sudo dpkg -i golangci-lint.deb
          sudo apt-get install -f

      - name: Verify golangci-lint installation
        run: |
          golangci-lint --version

      - name: Ensure golangci-lint is in PATH
        run: |
          echo "export PATH=$PATH:/usr/local/bin" >> $GITHUB_ENV
          echo $PATH  # Debug output to ensure path is correct

      - name: Run GolangCI-Lint
        run: golangci-lint run --timeout 5m

  test:
    runs-on: ubuntu-latest
    needs: lint
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: --health-cmd "pg_isready -U testuser" --health-timeout 30s --health-interval 10s --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: "1.23"

      - name: Install dependencies
        run: go mod tidy

      - name: Set DATABASE_URL environment variable
        run: echo "DATABASE_URL=postgres://testuser:testpassword@localhost:5432/testdb?sslmode=disable" >> $GITHUB_ENV

      - name: Wait for Postgres (increased timeout to 30 seconds)
        run: |
          for i in {1..30}; do
            if pg_isready -h localhost -p 5432 -U postgres; then
              echo "Postgres is ready"
              break
            fi
            echo "Waiting for Postgres..."
            sleep 3
          done
      # - name: Run tests
      #   run: go test ./tests -v

  docker:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      attestations: write
      id-token: write
      pull-requests: write
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker image
        run: |
          BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/} | tr '/' '-')
          COMMIT_HASH=$(git rev-parse --short HEAD)
          IMAGE_TAG="ghcr.io/${{ github.repository_owner }}/go-dns-resolver:${BRANCH_NAME}-${COMMIT_HASH}"
          LATEST_TAG="ghcr.io/${{ github.repository_owner }}/go-dns-resolver:${BRANCH_NAME}-latest"
          docker build -t $IMAGE_TAG -t $LATEST_TAG .
          echo $IMAGE_TAG
          echo $LATEST_TAG

      - name: Push Docker images
        run: |
          BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/} | tr '/' '-')
          COMMIT_HASH=$(git rev-parse --short HEAD)
          IMAGE_TAG="ghcr.io/${{ github.repository_owner }}/go-dns-resolver:${BRANCH_NAME}-${COMMIT_HASH}"
          LATEST_TAG="ghcr.io/${{ github.repository_owner }}/go-dns-resolver:${BRANCH_NAME}-latest"
          docker push $IMAGE_TAG
          docker push $LATEST_TAG

      - name: Update Helm Chart values
        run: |
          git checkout -b release-production
          git pull
          IMAGE_TAG="${BRANCH_NAME}-${COMMIT_HASH}"
          sed -i "s|tag: .*|tag: ${IMAGE_TAG##*:}|" helm-chart/values.yaml
          git config --global user.email "${{ secrets.GIT_EMAIL }}"
          git config --global user.name "${{ github.repository_owner  }}"
          git add helm-chart/values.yaml
          git commit -m "Update IMAGE Tag"

      - name: Push changes
        run: |
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/alifattahi/go-dns-resolver.git
          git push origin release-production
